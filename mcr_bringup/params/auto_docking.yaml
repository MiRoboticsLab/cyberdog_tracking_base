bt_navigator_docking:
  ros__parameters:
    use_sim_time: False
    global_frame: vodom
    robot_base_frame: base_link
    bt_loop_duration: 100
    default_server_timeout: 20
    enable_groot_monitoring: False
    groot_zmq_publisher_port: 1789
    groot_zmq_server_port: 1887
    default_auto_docking_bt_xml: auto_docking.xml
    # 'default_nav_through_poses_bt_xml' and 'default_nav_to_pose_bt_xml' are use defaults:
    # nav2_bt_navigator/navigate_to_pose_w_replanning_and_recovery.xml
    # nav2_bt_navigator/navigate_through_poses_w_replanning_and_recovery.xml
    # They can be set here or via a RewrittenYaml remap from a parent launch file to Nav2.
    plugin_lib_names:
      - nav2_compute_path_to_p_action_bt_node
      - nav2_compute_path_spline_poses_action_bt_node
      - nav2_compute_path_through_poses_action_bt_node
      - nav2_follow_p_action_bt_node
      - nav2_back_up_action_bt_node
      - nav2_spin_action_bt_node
      - nav2_spin_and_search_action_bt_node
      - nav2_wait_action_bt_node
      - nav2_clear_costmap_service_bt_node
      - nav2_is_stuck_condition_bt_node
      - nav2_goal_reached_condition_bt_node
      - nav2_goal_updated_condition_bt_node
      - nav2_initial_pose_received_condition_bt_node
      - nav2_reinitialize_global_localization_service_bt_node
      - nav2_rate_controller_bt_node
      - nav2_distance_controller_bt_node
      - nav2_speed_controller_bt_node
      - nav2_truncate_path_action_bt_node
      - nav2_goal_updater_node_bt_node
      - nav2_tracking_mode_decider_node_bt_node
      - nav2_target_updater_node_bt_node
      - nav2_recovery_node_bt_node
      - nav2_pipeline_sequence_bt_node
      - nav2_round_robin_node_bt_node
      - nav2_transform_available_condition_bt_node
      - nav2_time_expired_condition_bt_node
      - nav2_distance_traveled_condition_bt_node
      - nav2_single_trigger_bt_node
      - nav2_exception_verify_bt_node
      - nav2_is_battery_low_condition_bt_node
      - nav2_navigate_through_poses_action_bt_node
      - nav2_navigate_to_pose_action_bt_node
      - nav2_remove_passed_goals_action_bt_node
      - nav2_planner_selector_bt_node
      - nav2_controller_selector_bt_node
      - nav2_goal_checker_selector_bt_node
      - nav2_charger_updater_node_bt_node
      - nav2_change_gait_node_bt_node
      - nav2_seat_adjust_client_node_bt_node
      - nav2_is_battery_in_charge_condition_bt_node

bt_navigator_docking_rclcpp_node:
  ros__parameters:
    use_sim_time: False

bt_navigator_dockingautomatic_recharge_rclcpp_node:
  ros__parameters:
    use_sim_time: False
    global_frame: vodom
    robot_base_frame: base_link
    distance: 1.5
    distance_final: 0.5
    charger_updater_topic: chargetolidar
    max_pose_inuse: 0
    dist_throttle: 0.0

local_costmap_charging:
  local_costmap_charging:
    ros__parameters:
      update_frequency: 5.0
      publish_frequency: 2.0
      global_frame: vodom
      robot_base_frame: base_link
      transform_tolerance: 1.2
      use_sim_time: False
      rolling_window: true
      width: 5
      height: 5
      resolution: 0.01
      robot_radius: 0.22
      plugins: ["obstacle_layer", "inflation_layer"]
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 3.0
        inflation_radius: 0.55
      obstacle_layer:
        plugin: "mcr_tracking_components::ObstacleLayer"
        enabled: False
        use_tracking_mode: True
        tracking_pose_invisible_radius: 0.8
        tracking_pose_topic: tracking_pose
        observation_sources: scan
        scan:
          topic: scan
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          data_type: "LaserScan"
          obstacle_range: 10.0
          raytrace_range: 10.0
      voxel_layer:
        plugin: "nav2_costmap_2d::VoxelLayer"
        enabled: True
        publish_voxel_map: True
        origin_z: 0.0
        z_resolution: 0.05
        z_voxels: 16
        max_obstacle_height: 2.0
        mark_threshold: 0
        observation_sources: scan
        scan:
          topic: scan
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          data_type: "LaserScan"
          raytrace_max_range: 6.0
          raytrace_min_range: 0.0
          obstacle_max_range: 5.5
          obstacle_min_range: 0.0
      static_layer:
        map_subscribe_transient_local: True
      always_send_full_costmap: True
  local_costmap_charging_client:
    ros__parameters:
      use_sim_time: False
  local_costmap_charging_rclcpp_node:
    ros__parameters:
      use_sim_time: False

controller_server_docking:
  ros__parameters:
    use_sim_time: False
    odom_topic: odom_out
    controller_frequency: 10.0
    min_x_velocity_threshold: 0.001
    min_y_velocity_threshold: 0.5
    min_theta_velocity_threshold: 0.001
    failure_tolerance: 0.3
    progress_checker_plugins: ["fake_progress_checker"]
    goal_checker_plugins: ["general_goal_checker","general_goal_checkerL"] # "precise_goal_checker"
    controller_plugins: ["TrackingTargetL"]
    controller_costmaps: ["local_costmap_charging"]

    fake_progress_checker:
      plugin: "mcr_tracking_components::FakeProgressChecker"
      required_movement_radius: 0.5
      movement_time_allowance: 10.0
    # DWB parameters
    general_goal_checker:
      stateful: True
      plugin: "nav2_controller::SimpleGoalChecker"
      xy_goal_tolerance: 0.25
      yaw_goal_tolerance: 6.28
    general_goal_checkerL:
      stateful: True
      plugin: "mcr_tracking_components::XGoalChecker"
      xy_goal_tolerance: 0.378
      yaw_goal_tolerance: 1.57
      charger_updater_topic: chargetolidar
    TrackingTargetL:
      plugin: "dwb_core::DWBLocalPlanner"
      costmap: local_costmap_charging
      debug_trajectory_details: True
      min_vel_x: -0.05
      min_vel_y: -0.1
      max_vel_x: 0.05
      max_vel_y: 0.1
      max_vel_theta: 0.4
      min_speed_xy: 0.0
      max_speed_xy: 0.10
      min_speed_theta: 0.0
      # Add high threshold velocity for turtlebot 3 issue.
      # https://github.com/ROBOTIS-GIT/turtlebot3_simulations/issues/75
      acc_lim_x: 0.1
      acc_lim_y: 0.1
      acc_lim_theta: 2.0
      decel_lim_x: -0.1
      decel_lim_y: -0.1
      decel_lim_theta: -2.0
      vx_samples: 4
      vy_samples: 4
      vtheta_samples: 8
      sim_time: 1.7
      linear_granularity: 0.05
      angular_granularity: 0.025
      transform_tolerance: 0.2
      xy_goal_tolerance: 0.25
      trans_stopped_velocity: 0.25
      short_circuit_trajectory_evaluation: True
      stateful: True
      critics: [
          #"RotateToGoal",
          # # "Oscillation",
          #"BaseObstacle",
          "GoalAlign",
          "PathAlign",
          "PathDist",
          "GoalDist",
          "KeepTargetInsight",
        ]
      BaseObstacle.scale: 0.02
      PathAlign.scale: 32.0
      PathAlign.forward_point_distance: 0.1
      GoalAlign.scale: 24.0
      GoalAlign.forward_point_distance: 0.1
      PathDist.scale: 32.0
      GoalDist.scale: 24.0
      RotateToGoal.scale: 32.0
      RotateToGoal.slowing_factor: 5.0
      RotateToGoal.lookahead_time: -1.0
      KeepTargetInsight.class: mcr_tracking_components::KeepTargetInsightCritic
      KeepTargetInsight.scale: 42.0
      KeepTargetInsight.target_topic: chargetolidar
controller_server_docking_rclcpp_node:
  ros__parameters:
    use_sim_time: False

planner_server_docking:
  ros__parameters:
    expected_planner_frequency: 5.0
    use_sim_time: False
    planner_plugins: ["SplinePlannerL"]
    planner_costmaps: ["rolling_costmap_charging"]
    SplinePlannerL:
      use_sim_time: False
      plugin: mcr_global_planner/MCRSplinePlanner
      costmap: rolling_costmap_charging
      spline_name: linear
      pose_topic: "tracking_pose_in_map"
      # pose_topic: "target_traces"
      linear:
        plugin: mcr_planner_plugins::LinearInterpolation
        # plugin: mcr_planner_plugins::PolynomialFitting
        # plugin: mcr_planner_plugins::BSpliner
        # plugin: mcr_planner_plugins::PolynomialInterpolation
planner_server_docking_rclcpp_node:
  ros__parameters:
    use_sim_time: False

rolling_costmap_charging:
  rolling_costmap_charging:
    ros__parameters:
      update_frequency: 5.0
      publish_frequency: 1.0
      global_frame: vodom
      robot_base_frame: base_link
      rolling_window: true
      use_sim_time: False
      width: 6
      height: 6
      robot_radius: 0.22
      transform_tolerance: 1.2
      resolution: 0.05
      track_unknown_space: false
      plugins: ["obstacle_layer", "inflation_layer"]
      obstacle_layer:
        plugin: "mcr_tracking_components::ObstacleLayer"
        enabled: False
        use_tracking_mode: True
        tracking_pose_invisible_radius: 0.8
        tracking_pose_topic: tracking_pose
        observation_sources: scan
        scan:
          topic: scan
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          data_type: "LaserScan"
          raytrace_max_range: 6.0
          raytrace_min_range: 0.0
          obstacle_max_range: 5.5
          obstacle_min_range: 0.0
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        map_subscribe_transient_local: True
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 3.0
        inflation_radius: 0.55
      always_send_full_costmap: True
  rolling_costmap_charging_client:
    ros__parameters:
      use_sim_time: False
  rolling_costmap_charging_rclcpp_node:
    ros__parameters:
      use_sim_time: False
